"use strict";

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var firebase;
var uuid;

var getFirebaseAppInstance = function getFirebaseAppInstance() {
  var fbApp = require('firebase/app');

  return fbApp["default"] ? fbApp["default"] : fbApp;
};

var FirebaseService = /*#__PURE__*/function () {
  function FirebaseService(name, _temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        _ref$atomicServerTime = _ref.atomicServerTime,
        atomicServerTime = _ref$atomicServerTime === void 0 ? false : _ref$atomicServerTime;

    _defineProperty(this, "atomicServerTime", false);

    uuid = require('uuid/v4');
    name = name || uuid();
    firebase = getFirebaseAppInstance();

    require('firebase/database');

    require('firebase/auth');

    this.name = name;
    this.listeningOnRefs = [];
    this.db = null;
    this.terminated = false;
    this._initializationInProgress = Promise.resolve();
    this.atomicServerTime = atomicServerTime;
  }

  var _proto = FirebaseService.prototype;

  _proto.connect = /*#__PURE__*/function () {
    var _connect = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee(options, authKey) {
      var _this = this;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this._assertInstanceAlive();

              _context.next = 3;
              return this._initializationInProgress;

            case 3:
              this._initializationInProgress = new Promise(function (resolve) {
                return _this._initializationCompleted = resolve;
              });
              return _context.abrupt("return", Promise.resolve().then(function () {
                if (_this.db) {
                  _this._initializationCompleted();

                  return _this.db.goOnline();
                }

                return Promise.resolve().then(function () {
                  return firebase.initializeApp(options, _this.name);
                }).then(function (app) {
                  return app.auth().signInWithCustomToken(authKey).then(function () {
                    _this._initializationCompleted();

                    if (_this.terminated) {
                      return app["delete"]();
                    }

                    _this.db = app.database();
                  });
                });
              })["catch"](function (error) {
                _this._initializationCompleted();

                throw error;
              }));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function connect(_x, _x2) {
      return _connect.apply(this, arguments);
    }

    return connect;
  }();

  _proto.disconnect = function disconnect() {
    if (this.db) {
      this.listeningOnRefs.forEach(function (r) {
        return r.off();
      });
      this.listeningOnRefs.length = 0;
      this.db.goOffline();
    }
  };

  _proto.terminate = function terminate() {
    this.terminated = true;
    this.disconnect();

    if (this.db) {
      try {
        return this.db.app["delete"]();
      } finally {
        this.db = null;
      }
    }
  };

  _proto.getFirebaseServerTime = function getFirebaseServerTime(serverTimePath) {
    if (!this.db) {
      throw new Error("FirebaseService.getFirebaseServerTime: not connected! (path=" + getPathNameHint(serverTimePath) + ")");
    }

    if (this.atomicServerTime) {
      return this.db.ref('/.info/serverTimeOffset').once('value').then(function (data) {
        return data.val() + Date.now();
      });
    }

    var ref = this.db.ref(serverTimePath);
    return ref.set(firebase.database.ServerValue.TIMESTAMP).then(function () {
      return ref.once('value').then(function (snapshot) {
        return snapshot.val();
      });
    });
  };

  _proto.getValuesAtPath = function getValuesAtPath(_ref2) {
    var path = _ref2.path;

    if (!this.db) {
      throw new Error("FirebaseService.getValuesAsPath: not connected! (path=" + getPathNameHint(path) + ")");
    }

    return this.db.ref(path).once('value').then(function (snapshot) {
      return snapshot.val();
    });
  };

  _proto.listenOnRef = function listenOnRef(ref, options) {
    return this._listenOnRefWithQuery(ref, options);
  };

  _proto.listenOnPath = function listenOnPath(path, options) {
    if (!this.db) {
      throw new Error("FirebaseService.listenOnPath: not connected! (path=" + getPathNameHint(path) + ")");
    }

    var ref = this.db.ref(path);
    return this._listenOnRefWithQuery(ref, options);
  };

  _proto._listenOnRefWithQuery = function _listenOnRefWithQuery(ref, _temp2) {
    var _this2 = this;

    var _ref3 = _temp2 === void 0 ? {} : _temp2,
        orderBy = _ref3.orderBy,
        startAt = _ref3.startAt;

    if (orderBy) {
      ref = ref.orderByChild(orderBy);
    }

    if (startAt) {
      ref = ref.startAt(startAt);
    }

    return {
      when: function when(event) {
        return {
          call: function call(callback) {
            ref.on(event, function (snapshot) {
              try {
                var returnValue = callback({
                  // these are the fields available in the callback from a listener
                  key: snapshot.key,
                  value: snapshot.val(),
                  ref: snapshot.ref // a ref that can be used in listenOnRef

                });

                if (returnValue && typeof returnValue["catch"] === 'function') {
                  returnValue["catch"](console.error);
                }
              } catch (e) {
                console.error(e);
              }
            });

            _this2.listeningOnRefs.push(ref);
          }
        };
      }
    };
  };

  _proto._assertInstanceAlive = function _assertInstanceAlive() {
    if (this.terminated) {
      throw new Error("Can't connect a firebase service after termination, please use a different instance (name=" + this.name + ")");
    }
  };

  return FirebaseService;
}();

function getPathNameHint(path) {
  var pathNames = (path || '').split('/');
  return pathNames[pathNames.length - 1];
}

module.exports = FirebaseService;