"use strict";

var firebase;
var uuid;

function getPathNameHint(path) {
  var pathNames = (path || '').split('/');
  return pathNames[pathNames.length - 1];
}

function setupService() {
  var listeningOnRefs = [];
  var userDisconnected = false;
  var db = null;

  var listenOnRefWithQuery = function listenOnRefWithQuery(ref, _temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        orderBy = _ref.orderBy,
        startAt = _ref.startAt;

    if (orderBy) {
      ref = ref.orderByChild(orderBy);
    }

    if (startAt) {
      ref = ref.startAt(startAt);
    }

    return {
      when: function when(event) {
        return {
          call: function call(callback) {
            ref.on(event, function (snapshot) {
              try {
                var returnValue = callback({
                  // these are the fields available in the callback from a listener
                  key: snapshot.key,
                  value: snapshot.val(),
                  ref: snapshot.ref // a ref that can be used in listenOnRef

                });

                if (returnValue && typeof returnValue["catch"] === 'function') {
                  returnValue["catch"](console.error);
                }
              } catch (e) {
                console.error(e);
              }
            });
            listeningOnRefs.push(ref);
          }
        };
      }
    };
  };

  var service = {
    connect: function connect(options, authKey) {
      userDisconnected = false;
      return Promise.resolve().then(function () {
        return firebase.initializeApp(options, uuid());
      }).then(function (app) {
        return app.auth().signInWithCustomToken(authKey).then(function () {
          if (!userDisconnected) {
            db = app.database();
          }
        });
      });
    },
    disconnect: function disconnect() {
      listeningOnRefs.forEach(function (r) {
        return r.off();
      });
      listeningOnRefs.length = 0;
      db = null;
      userDisconnected = true;
    },
    terminate: function terminate() {
      return service.disconnect();
    },
    isConnected: function isConnected() {
      return !!db;
    },
    getFirebaseServerTime: function getFirebaseServerTime(serverTimePath) {
      if (!db) {
        throw new Error("You must connect before getting server time (path=" + getPathNameHint(serverTimePath) + ")");
      }

      var ref = db.ref(serverTimePath);
      return ref.set(firebase.database.ServerValue.TIMESTAMP).then(function () {
        return ref.once('value').then(function (snapshot) {
          return snapshot.val();
        });
      });
    },
    getValuesAtPath: function getValuesAtPath(_ref2) {
      var path = _ref2.path;

      if (!db) {
        throw new Error("You must connect before getting values at path (path=" + getPathNameHint(path) + ")");
      }

      return db.ref(path).once('value').then(function (snapshot) {
        return snapshot.val();
      });
    },
    listenOnRef: function listenOnRef(ref, options) {
      return listenOnRefWithQuery(ref, options);
    },
    listenOnPath: function listenOnPath(path, options) {
      if (!db) {
        throw new Error("You must connect before trying to listen to firebase paths (path=" + getPathNameHint(path) + ")");
      }

      var ref = db.ref(path);
      return listenOnRefWithQuery(ref, options);
    }
  };
  return service;
}

var FirebaseService = function FirebaseService() {
  firebase = require('firebase/app');

  require('firebase/database');

  require('firebase/auth');

  uuid = require('uuid');
  var service = setupService();
  Object.assign(this, service);
};

Object.assign(FirebaseService, setupService());
module.exports = FirebaseService;